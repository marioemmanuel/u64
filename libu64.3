.TH libu64 3 "August 2024" "1.0" "libu64 library functions"

.SH NAME
libu64 \- A key-value database library with 64-bit keys.

.SH SYNOPSIS
.nf
#include "u64.h"

void init_database(Database *db);
void setlimit_db(Database *db, int limit);
int getlimit_db(Database *db);
int getsize_db(Database *db);

void create(
	Database *db, 
	unsigned long key, 
	const unsigned char *value,
	size_t value_size);
const unsigned char *read(
	Database *db, 
	unsigned long key,
	size_t *value_size);
void update(
	Database *db, 
	unsigned long key, 
	const unsigned char *value,
	size_t value_size);
void delete(
	Database *db, 
	unsigned long key);
const unsigned char *read_by_index(
	Database *db, 
	int index,
	size_t *value_size);

int read_db(Database *db, const char *filename);
int write_db(Database *db, const char *filename);
.fi

.SH DESCRIPTION
The \fBlibu64\fP library is a key-value database library with the following
characteristics:

\- Written in strict ANSI C89 (highly portable).
.br
\- No dependencies on external libraries.
.br
\- Single-threaded (intended to be embeddable with other processes).
.br
\- Simple and lightweight.
.br
\- Fast and performant through sorted storage of database items.
.br
\- Keys are unsigned long 64 bits.
.br
\- Values are arbitrary length of bytes.
.br
\- Commands and outputs via stdin and stdout (intended to be used as an
  embedded database in systems).
.br
\- Front end for testing available.
.br
\- Four CRUD operations implemented as main commands: Create, Read, 
  Update, Delete.
.br
\- Two operations implemented to allow iteration over items: 
  ReadByIndex and GetSize.
.br
\- Two operations implemented to provide persistence via snapshots:
  ReadDatabase and WriteDatabase.

.SH DATABASE RELATED FUNCTIONS

.SS "void init_database(Database *db)"
Initializes the database structure. This function sets the initial size of
the database to 0 and the limit to \fIMAX_SIZE\fP, which is defined as
1,000,000 records.

.SS "void setlimit_db(Database *db, int limit)"
Sets the maximum number of records that can be stored in the database. The
limit must be a positive integer and no greater than \fIMAX_SIZE\fP.

.SS "int getlimit_db(Database *db)"
Returns the current limit on the number of records in the database.

.SS "int getsize_db(Database *db)"
Returns the current number of records in the database.

.SH RECORD RELATED FUNCTIONS

.SS "void create(Database *db, unsigned long key, const unsigned char *value, size_t value_size)"
.br
Creates a new record in the database with the specified key and value. If the
key already exists, the function will print an error message. If the database
is full, the function will also print an error message.

.SS "const unsigned char *read(Database *db, unsigned long key, size_t *value_size)"
.br
Reads the value associated with the specified key from the database. If the
key is found, the function returns a pointer to the value and sets
\fIvalue_size\fP to the size of the value. If the key is not found, the
function returns \fBNULL\fP.

.SS "void update(Database *db, unsigned long key, const unsigned char *value, size_t value_size)"
.br
Updates the value associated with the specified key in the database. If the
key is not found, the function will print an error message.

.SS "void delete(Database *db, unsigned long key)"
.br
Deletes the record associated with the specified key from the database. If
the key is not found, the function will print an error message.

.SS "const unsigned char *read_by_index(Database *db, int index, size_t *value_size)"
.br
Reads the value at the specified index from the database. If the index is
valid, the function returns a pointer to the value and sets \fIvalue_size\fP
to the size of the value. If the index is not valid, the function returns
\fBNULL\fP.

.SH PERSISTENCE RELATED FUNCTIONS

.SS "int read_db(Database *db, const char *filename)"
.br
Reads the database from the specified file. If the file cannot be opened, the
function returns \fB-1\fP. On success, the function returns \fB0\fP.

.SS "int write_db(Database *db, const char *filename)"
.br
Writes the current state of the database to the specified file. If the file
cannot be opened, the function returns \fB-1\fP. On success, the function
returns \fB0\fP.

.SH EXAMPLE
.nf
#include "db.h"
#include "persistence.h"
#include <stdio.h>

int main() {
    Database db;
    init_database(&db);

    unsigned char value1[] = {0x01, 0x02, 0x03, 0x04};
    create(&db, 100, value1, sizeof(value1));

    size_t size;
    const unsigned char *read_value = read(&db, 100, &size);
    if (read_value) {
        printf("Read key 100: ");
        for (size_t i = 0; i < size; i++) {
            printf("%02x ", read_value[i]);
        }
        printf("\n");
    }

    write_db(&db, "database.dat");
    return 0;
}
.fi

.SH SEE ALSO
\&

.SH AUTHOR
Mario Emmanuel, 2024

.SH LICENSE
See the LICENSE file for details.
